import pandas as pd
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()


configfile: "config/config.yaml"


datasets = pd.read_csv("config/datasets.csv", sep=",", index_col=0)
results = config["results_directory"]
LOGDIR = config["log_directory"]


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


def get_prism_genesets_classic(wildcards):
    checkpoint_output = checkpoints.prism_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/prism/genesets/classic/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_prism_genesets_fold(wildcards):
    checkpoint_output = checkpoints.prism_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/prism/genesets/fold/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_ctrp_genesets_classic(wildcards):
    checkpoint_output = checkpoints.ctrp_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/ctrp/genesets/classic/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_ctrp_genesets_fold(wildcards):
    checkpoint_output = checkpoints.ctrp_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/ctrp/genesets/fold/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_gdsc_genesets_classic(wildcards):
    checkpoint_output = checkpoints.gdsc_generate_compound_curves.get(
        **wildcards
    ).output["auc_models_candidates"]

    return expand(
        f"{results}/gdsc/genesets/classic/{{drug_id}}",
        drug_id=glob_wildcards(
            os.path.join(checkpoint_output, "{drug_id}.csv")
        ).drug_id,
    )


def get_gdsc_genesets_fold(wildcards):
    checkpoint_output = checkpoints.gdsc_generate_compound_curves.get(
        **wildcards
    ).output["auc_models_candidates"]

    return expand(
        f"{results}/gdsc/genesets/fold/{{drug_id}}",
        drug_id=glob_wildcards(
            os.path.join(checkpoint_output, "{drug_id}.csv")
        ).drug_id,
    )


def get_depmap_genesets(wildcards):
    checkpoint_output = checkpoints.dependencies_annotate_crispr_data.get(
        **wildcards
    ).output["model_candidates"]

    return expand(
        f"{results}/dependencies/genesets/{{gene}}",
        gene=glob_wildcards(os.path.join(checkpoint_output, "{gene}.csv")).gene,
    )


# Awful, lazy rule
rule all:
    input:
        get_prism_genesets_classic,
        get_gdsc_genesets_classic,
        get_prism_genesets_classic,
        f"{results}/drug_database.rdata",
    output:
        f"{results}/drug_signatures_classic.gmt",
    threads: 1
    resources:
        mem=4096,
        walltime=10,
    shell:
        "cat {results}/ctrp/genesets/classic/*/*.gmt {results}/gdsc/genesets/classic/*/*.gmt {results}/prism/genesets/classic/*/*.gmt > {output}"


## Load rules ##
include: "rules/common.smk"
include: "rules/gdsc_arrays_signatures.smk"
include: "rules/prism_signatures.smk"
include: "rules/ctrp_signatures.smk"
include: "rules/dependency_signatures.smk"
include: "rules/database.smk"
